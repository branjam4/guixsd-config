# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          
  guix-build:
    name: Test Guix installation
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Guix cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/guix
          # use a key that (almost) never matches
          key: guix-cache-${{ github.sha }}
          restore-keys: |
            guix-cache-
      # Cannot use a cache for /gnu/store, since restore fails
      - name: Install Guix
        uses: PromyLOPh/guix-install-action@v1
      - name: Ensure no locale warning
        run: test -z "$(guix --version 2>&1 >/dev/null)"
      # Create VM
      - name: System VM (full VM)
        run: guix system image --image-type=qcow2 --root=emacs-vm.qcow2 vm.scm
      # Create a docker image
      - name: Pack (Docker)
        run: guix pack --relocatable --save-provenance --symlink=/opt/gnu/bin=bin --root=qemu-python.tar.gz -m $GITHUB_WORKSPACE/qemu-manifest.scm
      # Upload all artifacts
      - name: Upload pack (Relocatable Binary)
        uses: actions/upload-artifact@v2
        with:
          name: emacs VM
          path: emacs-vm.qcow2
      - name: Upload pack (Docker)
        uses: actions/upload-artifact@v2
        with:
          name: qemu Docker relocatable Binary
          path: 'qemu-python.tar.gz'
