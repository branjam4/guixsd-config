# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
    tags: [ 'v*.*.*' ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          
  guix-build:
    name: Test Guix installation
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Guix cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/guix
          # use a key that (almost) never matches
          key: guix-cache-${{ github.sha }}
          restore-keys: |
            guix-cache-
      # Cannot use a cache for /gnu/store, since restore fails
      - name: Install Guix
        uses: PromyLOPh/guix-install-action@v1
      - name: Ensure no locale warning
        run: test -z "$(guix --version 2>&1 >/dev/null)"
      # Create VM
      - name: System VM (full VM)
        run: guix system image --image-type=qcow2 --root=emacs-vm.qcow2 vm.scm
      # Create a docker image
      - name: Pack (Docker)
        run: guix pack --relocatable --save-provenance --symlink=/opt/gnu/bin=bin --root=qemu-python.tar.gz -m $GITHUB_WORKSPACE/qemu-manifest.scm
      # Upload all artifacts
      - name: Upload pack (Relocatable Binary)
        uses: actions/upload-artifact@v2
        with:
          name: emacs VM
          path: emacs-vm.qcow2
      - name: Upload pack (Docker)
        uses: actions/upload-artifact@v2
        with:
          name: qemu Docker relocatable Binary
          path: 'qemu-python.tar.gz'

  container-deploy:
    name: Build and push to ghcr
    runs-on: ubuntu-latest
    needs: guix-build
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # Download artifacts
      - name: Download pack (Relocatable Binary)
        uses: actions/download-artifact@v3.0.0
        with:
          name: emacs VM
          path: temp/
          
      - name: Download pack (Docker)      
        uses: actions/download-artifact@v3.0.0
        with:
          name: qemu Docker relocatable Binary
          path: temp/
          
      - name: Display structure of downloaded files
      run: ls -R
      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@d6a3abf1bdea83574e28d40543793018b6035605
        with:
          cosign-release: 'v1.7.1'

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true
          
      - name: Build
        run: |
          docker build --no-cache . # will run buildx
          ls -R
          
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: cosign sign ${{ steps.meta.outputs.tags }}@${{ steps.build-and-push.outputs.digest }}  
